"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.httpAdapter = void 0;
var _nodeUrl = require("node:url");
var _string = require("../utils/string.utils");
var defaultNotFoundHandler = _interopRequireWildcard(require("../components/default-not-found"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var httpAdapter = {
  getPathname: function getPathname(req) {
    var _URL = new _nodeUrl.URL((0, _string.withoutTrailingSlashes)(req.url || ''), "https://".concat(req.headers.host)),
      pathname = _URL.pathname;
    return pathname;
  },
  getMethod: function getMethod(req) {
    var _req$method;
    return (_req$method = req.method) === null || _req$method === void 0 ? void 0 : _req$method.toLowerCase();
  },
  defaultNotFoundHandler: defaultNotFoundHandler["default"]
};
exports.httpAdapter = httpAdapter;
//# sourceMappingURL=http-adapter.js.map