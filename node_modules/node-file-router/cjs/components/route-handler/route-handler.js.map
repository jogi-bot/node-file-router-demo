{"version":3,"file":"route-handler.js","names":["_fp","require","_object","_slugParam","_typeof","obj","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","_createClass","protoProps","staticProps","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","call","Number","RouteHandler","assign","value","getRouteParams","pathname","_RegExp$exec","_this","groups","RegExp","regex","exec","pipe","filterValues","Boolean","mapValues","group","paramExtractors","mapKeys","decodeSlugParam","exports"],"sources":["../../../../src/components/route-handler/route-handler.ts"],"sourcesContent":["import { pipe } from '../../utils/fp.utils';\nimport { filterValues, mapKeys, mapValues } from '../../utils/object.utils';\nimport { decodeSlugParam } from '../slug-param/slug-param';\nimport type { Dictionary } from '../../types/dictionary';\nimport type { ParamExtractor } from '../dynamic-routes/common/route-params-parser';\n\nimport type { RequestHandler } from '../../types/request-handler';\n\ninterface Props {\n  method?: string;\n  fileName: string;\n  handler: RequestHandler | Record<string, RequestHandler>;\n  regex: RegExp;\n  paramExtractors: Record<string, ParamExtractor>;\n  nestingLevel: number;\n}\n\nexport class RouteHandler {\n  method?: string;\n  fileName: string;\n  handler: RequestHandler | Record<string, RequestHandler>;\n  regex: RegExp;\n  nestingLevel: number;\n\n  private paramExtractors: Record<string, ParamExtractor>;\n\n  constructor(props: Props) {\n    Object.assign(this, props);\n  }\n\n  getRouteParams(pathname: string): Dictionary<string> {\n    const groups = new RegExp(this.regex).exec(pathname)?.groups || {};\n    return pipe(\n      filterValues<string>(Boolean),\n      mapValues<string, string | string[]>((group, key) =>\n        this.paramExtractors[key](group)\n      ),\n      mapKeys(decodeSlugParam)\n    )(groups);\n  }\n}\n"],"mappings":";;;;;;AAAA,IAAAA,GAAA,GAAAC,OAAA;AACA,IAAAC,OAAA,GAAAD,OAAA;AACA,IAAAE,UAAA,GAAAF,OAAA;AAA2D,SAAAG,QAAAC,GAAA,sCAAAD,OAAA,wBAAAE,MAAA,uBAAAA,MAAA,CAAAC,QAAA,aAAAF,GAAA,kBAAAA,GAAA,gBAAAA,GAAA,WAAAA,GAAA,yBAAAC,MAAA,IAAAD,GAAA,CAAAG,WAAA,KAAAF,MAAA,IAAAD,GAAA,KAAAC,MAAA,CAAAG,SAAA,qBAAAJ,GAAA,KAAAD,OAAA,CAAAC,GAAA;AAAA,SAAAK,gBAAAC,QAAA,EAAAC,WAAA,UAAAD,QAAA,YAAAC,WAAA,eAAAC,SAAA;AAAA,SAAAC,kBAAAC,MAAA,EAAAC,KAAA,aAAAC,CAAA,MAAAA,CAAA,GAAAD,KAAA,CAAAE,MAAA,EAAAD,CAAA,UAAAE,UAAA,GAAAH,KAAA,CAAAC,CAAA,GAAAE,UAAA,CAAAC,UAAA,GAAAD,UAAA,CAAAC,UAAA,WAAAD,UAAA,CAAAE,YAAA,wBAAAF,UAAA,EAAAA,UAAA,CAAAG,QAAA,SAAAC,MAAA,CAAAC,cAAA,CAAAT,MAAA,EAAAU,cAAA,CAAAN,UAAA,CAAAO,GAAA,GAAAP,UAAA;AAAA,SAAAQ,aAAAf,WAAA,EAAAgB,UAAA,EAAAC,WAAA,QAAAD,UAAA,EAAAd,iBAAA,CAAAF,WAAA,CAAAH,SAAA,EAAAmB,UAAA,OAAAC,WAAA,EAAAf,iBAAA,CAAAF,WAAA,EAAAiB,WAAA,GAAAN,MAAA,CAAAC,cAAA,CAAAZ,WAAA,iBAAAU,QAAA,mBAAAV,WAAA;AAAA,SAAAa,eAAAK,GAAA,QAAAJ,GAAA,GAAAK,YAAA,CAAAD,GAAA,oBAAA1B,OAAA,CAAAsB,GAAA,iBAAAA,GAAA,GAAAM,MAAA,CAAAN,GAAA;AAAA,SAAAK,aAAAE,KAAA,EAAAC,IAAA,QAAA9B,OAAA,CAAA6B,KAAA,kBAAAA,KAAA,kBAAAA,KAAA,MAAAE,IAAA,GAAAF,KAAA,CAAA3B,MAAA,CAAA8B,WAAA,OAAAD,IAAA,KAAAE,SAAA,QAAAC,GAAA,GAAAH,IAAA,CAAAI,IAAA,CAAAN,KAAA,EAAAC,IAAA,oBAAA9B,OAAA,CAAAkC,GAAA,uBAAAA,GAAA,YAAAzB,SAAA,4DAAAqB,IAAA,gBAAAF,MAAA,GAAAQ,MAAA,EAAAP,KAAA;AAAA,IAe9CQ,YAAY;EASvB,SAAAA,aAAYzB,KAAY,EAAE;IAAAN,eAAA,OAAA+B,YAAA;IACxBlB,MAAM,CAACmB,MAAM,CAAC,IAAI,EAAE1B,KAAK,CAAC;EAC5B;EAACW,YAAA,CAAAc,YAAA;IAAAf,GAAA;IAAAiB,KAAA,EAED,SAAAC,eAAeC,QAAgB,EAAsB;MAAA,IAAAC,YAAA;QAAAC,KAAA;MACnD,IAAMC,MAAM,GAAG,EAAAF,YAAA,OAAIG,MAAM,CAAC,IAAI,CAACC,KAAK,CAAC,CAACC,IAAI,CAACN,QAAQ,CAAC,cAAAC,YAAA,uBAArCA,YAAA,CAAuCE,MAAM,KAAI,CAAC,CAAC;MAClE,OAAO,IAAAI,QAAI,EACT,IAAAC,oBAAY,EAASC,OAAO,CAAC,EAC7B,IAAAC,iBAAS,EAA4B,UAACC,KAAK,EAAE9B,GAAG;QAAA,OAC9CqB,KAAI,CAACU,eAAe,CAAC/B,GAAG,CAAC,CAAC8B,KAAK,CAAC;MAAA,CAClC,CAAC,EACD,IAAAE,eAAO,EAACC,0BAAe,CACzB,CAAC,CAACX,MAAM,CAAC;IACX;EAAC;EAAA,OAAAP,YAAA;AAAA;AAAAmB,OAAA,CAAAnB,YAAA,GAAAA,YAAA"}