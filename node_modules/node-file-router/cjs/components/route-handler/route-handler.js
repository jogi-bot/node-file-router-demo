"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RouteHandler = void 0;
var _fp = require("../../utils/fp.utils");
var _object = require("../../utils/object.utils");
var _slugParam = require("../slug-param/slug-param");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var RouteHandler = /*#__PURE__*/function () {
  function RouteHandler(props) {
    _classCallCheck(this, RouteHandler);
    Object.assign(this, props);
  }
  _createClass(RouteHandler, [{
    key: "getRouteParams",
    value: function getRouteParams(pathname) {
      var _RegExp$exec,
        _this = this;
      var groups = ((_RegExp$exec = new RegExp(this.regex).exec(pathname)) === null || _RegExp$exec === void 0 ? void 0 : _RegExp$exec.groups) || {};
      return (0, _fp.pipe)((0, _object.filterValues)(Boolean), (0, _object.mapValues)(function (group, key) {
        return _this.paramExtractors[key](group);
      }), (0, _object.mapKeys)(_slugParam.decodeSlugParam))(groups);
    }
  }]);
  return RouteHandler;
}();
exports.RouteHandler = RouteHandler;
//# sourceMappingURL=route-handler.js.map